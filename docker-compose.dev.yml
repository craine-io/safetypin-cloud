version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    container_name: safetypin-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: safetypin
    ports:
      - "5432:5432"
    volumes:
      - postgres-data-dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API service (development mode)
  backend:
    build:
      context: ./safetypin-backend
      dockerfile: Dockerfile.dev
    container_name: safetypin-backend-dev
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=safetypin
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - PORT=3000
      - RUN_MIGRATIONS=true
      - JWT_SECRET=dev-secret-key
      - DEV_ENCRYPTION_KEY=dev-encryption-key
    ports:
      - "3000:3000"
    volumes:
      - ./safetypin-backend:/app
      - backend-node-modules:/app/node_modules
    command: npm run dev

  # Frontend application (development mode)
  frontend:
    build:
      context: ./safetypin-frontend
      dockerfile: Dockerfile.dev
    container_name: safetypin-frontend-dev
    restart: unless-stopped
    ports:
      - "3001:3000"
    depends_on:
      - backend
    volumes:
      - ./safetypin-frontend:/app
      - frontend-node-modules:/app/node_modules
    command: npm start
    environment:
      - REACT_APP_API_URL=http://localhost:3000
      - WDS_SOCKET_PORT=3001  # For hot reloading to work properly

volumes:
  postgres-data-dev:
  backend-node-modules:
  frontend-node-modules:
